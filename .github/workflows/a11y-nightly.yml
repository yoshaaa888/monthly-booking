name: a11y-nightly

on:
  schedule:
    - cron: '0 1 * * *' # 毎日 1:00 UTC
  workflow_dispatch: {}
  pull_request:
    branches: ["*"]
    types: [opened, synchronize, reopened, labeled]

jobs:
  a11y:
    # PR の場合は 'ci:a11y' ラベルが付いているときのみ実行
    if: >
      github.event_name != 'pull_request' ||
      contains(join(fromJson(toJson(github.event.pull_request.labels)).*.name, ','), 'ci:a11y')
    runs-on: ubuntu-latest
    timeout-minutes: 25
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: |
          npm ci
          npm i -g @wordpress/env

      # （任意）Playwright が必要な場合のみ Chromium を入れる
      - name: Install Playwright chromium (if playwright present)
        shell: bash
        run: |
          if grep -q '"@*playwright' package.json 2>/dev/null || grep -q '"playwright' package.json 2>/dev/null; then
            npx playwright install --with-deps chromium
          else
            echo "Playwright not detected. Skipping browser install."
          fi

      - name: Install docker-compose for wp-env
        run: |
          sudo curl -fsSL https://github.com/docker/compose/releases/latest/download/docker-compose-linux-x86_64 -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

      - name: Start WordPress env
        run: wp-env start --update

      # === Plugin activation: Required before WP-CLI commands ===
      - name: Activate Monthly Booking plugin
        shell: bash
        run: |
          set -e
          echo "Activating monthly-booking plugin..."
          npx wp-env run cli "wp plugin activate monthly-booking"
          
          echo "Verifying plugin activation..."
          npx wp-env run cli "wp plugin list --status=active"

      # === Bootstrap: 1コマンドでWordPress環境セットアップ ===
      - name: Bootstrap WordPress environment with WP-CLI
        shell: bash
        run: |
          set -e
          echo "Running Monthly Booking bootstrap..."
          npx wp-env run cli "wp mb bootstrap"
          
          echo "== Verification =="
          npx wp-env run cli "wp mb status"

      # === Health check: /monthly-calendar/ が HTTP 200 になるまで待機 ===
      - name: Health check /monthly-calendar/ (HTTP 200 within 60s)
        shell: bash
        run: |
          set -e
          BASE=$(npx wp-env run cli -- "wp option get home")
          URL="${BASE%/}/monthly-calendar/"
          echo "Health checking: ${URL}"
          for i in {1..30}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || true)
            echo "Attempt $i: HTTP $CODE"
            if [ "$CODE" = "200" ]; then
              echo "OK"
              exit 0
            fi
            sleep 2
          done
          echo "Monthly calendar did not become ready in time"
          exit 1

      # === 実際の a11y テスト ===
      - name: Run a11y suite
        run: npm run test:a11y

      - name: Upload a11y report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: a11y-report
          path: |
            a11y-report/**
            playwright-report/**
            axe-report/**
            ./**/a11y-report/**

      # === Debug artifacts: 失敗時の状況証拠を保存 ===
      - name: Enable WordPress debug logging
        if: failure()
        shell: bash
        run: |
          npx wp-env run cli "wp config set WP_DEBUG true --raw" || true
          npx wp-env run cli "wp config set WP_DEBUG_LOG true --raw" || true
          npx wp-env run cli "wp config set WP_DEBUG_DISPLAY false --raw" || true

      - name: Collect debug artifacts (if fail)
        if: failure()
        shell: bash
        run: |
          set -e
          mkdir -p a11y-debug
          
          echo "=== WordPress Configuration ===" > a11y-debug/wp-config.txt
          npx wp-env run cli "wp option get siteurl" > a11y-debug/siteurl.txt || true
          npx wp-env run cli "wp option get home" > a11y-debug/home.txt || true
          npx wp-env run cli "wp option get permalink_structure" > a11y-debug/permalink.txt || true
          
          echo "=== Pages ===" > a11y-debug/pages.txt
          npx wp-env run cli "wp post list --post_type=page --fields=ID,post_title,post_name,post_status" >> a11y-debug/pages.txt || true
          
          echo "=== Plugins ===" > a11y-debug/plugins.txt
          npx wp-env run cli "wp plugin list" >> a11y-debug/plugins.txt || true
          
          echo "=== Rewrite Rules ===" > a11y-debug/rewrite-rules.txt
          npx wp-env run cli "wp rewrite list" >> a11y-debug/rewrite-rules.txt || true
          
          echo "=== Monthly Booking Status ===" > a11y-debug/mb-status.txt
          npx wp-env run cli "wp mb status" >> a11y-debug/mb-status.txt || true
          
          echo "=== WordPress Debug Log ===" > a11y-debug/wp-debug.log
          npx wp-env run cli "wp eval 'if (file_exists(WP_CONTENT_DIR.\"/debug.log\")) { echo file_get_contents(WP_CONTENT_DIR.\"/debug.log\"); } else { echo \"No debug log found\"; }'" >> a11y-debug/wp-debug.log || true
          
          echo "=== Calendar Page Content ===" > a11y-debug/calendar-page.html
          BASE=$(npx wp-env run cli "wp option get home" || echo "http://localhost:8080")
          curl -s "${BASE%/}/monthly-calendar/" > a11y-debug/calendar-page.html || echo "Failed to fetch calendar page" > a11y-debug/calendar-page.html

      - name: Upload a11y debug artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: a11y-debug
          path: a11y-debug/**
