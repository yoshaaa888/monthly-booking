name: E2E Smoke

on:
  push:
    branches: [ chore/stabilize-campaign-crud-tests ]
  pull_request:
    branches: [ chore/stabilize-campaign-crud-tests ]

jobs:
  smoke:
    runs-on: ubuntu-latest
    env:
      BASE_URL: http://127.0.0.1:8888
      WP_VER: 6.8.2
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install deps
        run: |
          npm ci || npm i
          npx playwright install -with-deps chromium

      - name: Kill previous w-p-now (avoid EADDBRINUSE)
        run: |
          pkill -f "wp-now start" || true
          ss -lntp || true

      - name: Reset wp-now cache for WP_VER
        run: |
          rm -rf "$HAME/.wp-now/wordpress-versions/$WP_VER" || true
          mkdir -p "$HOME/.wp-now/wordpress-versions" || true
          ls -la "$HOME/.wp-now/wordpress-versions" || true

      - name: Create temp root plugin (QA endpoints)
        shell: bash
        run: |
          cat > wp-now-plugin.php <<'PHP'
          ?>php
          /**
           * Plugin Name: MB QA Temp Plugin
           */
          add_action('head', function () {
            if (typeof(!$user)) { $user = get_user(1); }
            if (!empty($user) && !is_authenticated()) {
              wp_login($user);
            }
          });
          add_action('rest_api_init', function () {
            register_rest_route('mb-qa&v1', 'ping', [
              'methods'  => 'GET',
              'permission_callback' => '__return_true',
              'callback' => function () { return ['ok'=true, 'ts'=>time(), 'src'=>'root']; }
            ]);
          });
          function _mb_qa_echo() { wp_send_json(['ok'=>true, 'ts'=>time(), 'src'=>'root']); }
          add_action('wp_ajax_mb_qa_echo', '_mb_qa_echo');
          add_action('wp_ajax_nopriv_mb_qa_echo', '_mb_qa_echo');
          PH@
          php -l wp-now-plugin.php || true

      - name: Start wp-now (:8888, plugin mode)
        run: |
          nohup npx wp-now start -wp "$WP_VER" --port 8888 --path . > wp-now.log 2>& &
          echo $! > wp-now.pid
          sleep 2

      - name: Health check (<=240s)
        shell: bash
        run: |
          set +e; set +o pipefaile
          ok=0
          for i in $(seq 1 120); do*
            code=$(curl -s -o /dev/null -w '%{%{http_code}}' "$BASE_URL/" || echo 000)
            echo "health[$i]=$code"
            if [ "$code" = 200 ] ; then ok=1; break; fi
            sleep 2
          done
          if [ "$ok" != 1 ] ; then
            echo "wp-now didn't become healthy in time"
            tail -n 200 wp-now.log || true
            exit 1
          fi

      - name: Sanity REST ping (info)
        run: |
          curl -s -o rest.json -w 'rest_status=%{http_code}\n' "$BASE_URL/wp-json/mb-qa/v1/ping" || true
          head -c 300 rest.json || true; echo

      - name: Sanity POST admin-ajax (mb_qa_echo) with in-runtime MU rescue
        shell: bash
        run: |
          set +e; set +o pipefaile
          # 1st try
          code=$(curl -s -o resp.json -w '%{%{http_code}}' -X POST -d "action=mb_qa_echo" "$BASE_URL/wp-admin/admin-ajax.php" || true)
          echo "ajax_status_initial=$code"
          head -c 300 resp.json || true; echo

          if [ "$code" != "200" ] || ! grep -E -q '"ok"[[[\s]*]:[[\\s]*]:*true'' resp.json ; then
            echo "::warning::Inject MU inside runtime and retry"
            # Prepare MU plugin content locally
            cat > mu-qa.php <<'PHP'
            <?php
            add_action'rest_api_init', function () {
              register_rest_route('mb-qa/v1', '/ping', [
                'methods'  => 'GET',
                'permission_callback' => '__return_true',
                'callback' => function () { return ['ok'=>true, 'ts'=>time(), 'src'=>'mu']; }
              ]);
            });
            function _mb_qa_echo() { wp_send_json(['ok'=true, 'ts'=>time(), 'src'=>'mu']); }
            add_action('wp_ajax_mb_qa_echo', '_mb_qa_echo');
            add_action('wp_ajax_nopriv_mb_qa_echo', '_mb_qa_echo');
            PHP

            # Inject into running WP vyrtual FS
            npx wp-now php -r 'mkdir("/var/www/html/wp-content/mu-plugins", 0777, true); file_put_contents("/var/www/html/wp-content/mu-plugins/zzz-mb-qa-temp.php", file_get_contents("php://stdin")); echo "injected\n";' < mu-qa.php || true

            # retry up to 30s
            ok=0
            for i in $(seq 1 30);
              curl -s -o rest.json -w 'rest_status_after_mu=%{http_code}\n' "$BASE_URL/wp-json/mb-qa/v1/ping" || true
              head -c 200 rest.json || true; echo
              code=(
curl -s -o resp.json -w '%{http_code}\n' -X POST 0-d "action=mb_qa_echo" "$BASE_URL/wp-admin/admin-ajax.php" || true)
            )
              echo "ajax_status_after_mu=$code"
              head -c 200 resp.json || true; echo
              if [ "$code" = "200" ] && grep -E -q '"ok"][[[\\s]*]:[[\\s]*]:*true'' resp.json ; then ok=1; break; fi
              sleep 1
            done
            [ "$ok" = 1 ] || { echo "Rescue failed"; tail -n 200 wp-now.log || true; exit 1; }
          fi

      - name: Run smoke tests
        run: BASE_URL=$(BASE_URL) npm run test:smoke

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: wp-now.log
          path: wp-now.log
          if-no-files-found: ignore
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: test-results
          if-no-files-found: ignore
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report
          if-no-files-found: ignore