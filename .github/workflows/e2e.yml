name: E2E Tests (WordPress + Monthly Booking)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports: ["3306:3306"]
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wp
          MYSQL_PASSWORD: wp
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install WordPress CLI
        run: |
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp

      - name: Start PHP + WordPress
        run: |
          sudo apt-get update
          sudo apt-get install -y php php-mysql php-curl php-xml php-mbstring unzip
          mkdir -p /tmp/wordpress
          cd /tmp
          curl -O https://wordpress.org/latest.zip
          unzip latest.zip
          mv wordpress/* /tmp/wordpress/
          cd /tmp/wordpress
          wp config create \
            --dbname=wordpress \
            --dbuser=wp \
            --dbpass=wp \
            --dbhost=127.0.0.1:3306 \
            --allow-root
          wp core install \
            --url="http://localhost:8080" \
            --title="Test Site" \
            --admin_user=admin \
            --admin_password=admin \
            --admin_email=test@example.com \
            --skip-email \
            --allow-root
          php -S 0.0.0.0:8080 -t /tmp/wordpress > /dev/null 2>&1 &

      - name: Wait for WordPress
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8080 | grep "Test Site" > /dev/null; then
              echo "WordPress is up"
              break
            fi
            echo "Waiting for WordPress..."
            sleep 5
          done

      - name: Copy plugin to WordPress
        run: |
          cp -r . /tmp/wordpress/wp-content/plugins/monthly-booking/
          cd /tmp/wordpress
          wp plugin activate monthly-booking --allow-root

      - name: Create plugin DB tables with idempotent schema reconciliation
        run: |
          cd /tmp/wordpress
          
          # --- Schema reconcile: campaigns (idempotent) ---
          wp db query "CREATE TABLE IF NOT EXISTS wp_monthly_campaigns (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;" --quiet --allow-root

          wp db query "ALTER TABLE wp_monthly_campaigns 
            ADD COLUMN IF NOT EXISTS room_id BIGINT UNSIGNED NULL,
            ADD COLUMN IF NOT EXISTS title VARCHAR(191) NOT NULL DEFAULT '',
            ADD COLUMN IF NOT EXISTS type VARCHAR(50) NOT NULL DEFAULT 'discount',
            ADD COLUMN IF NOT EXISTS start_date DATE NOT NULL,
            ADD COLUMN IF NOT EXISTS end_date DATE NOT NULL,
            ADD COLUMN IF NOT EXISTS is_active TINYINT(1) NOT NULL DEFAULT 1;" --quiet --allow-root

          # Indexes (ignore errors if they already exist)
          wp db query "CREATE INDEX room_id_idx ON wp_monthly_campaigns (room_id);" --allow-root || true
          wp db query "CREATE INDEX start_date_idx ON wp_monthly_campaigns (start_date);" --allow-root || true
          wp db query "CREATE INDEX end_date_idx ON wp_monthly_campaigns (end_date);" --allow-root || true

          # --- Schema reconcile: rooms (idempotent) ---
          wp db query "CREATE TABLE IF NOT EXISTS wp_monthly_rooms (
            room_id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;" --quiet --allow-root
          
          wp db query "ALTER TABLE wp_monthly_rooms
            ADD COLUMN IF NOT EXISTS display_name VARCHAR(191) NOT NULL DEFAULT '',
            ADD COLUMN IF NOT EXISTS room_name VARCHAR(191) NOT NULL DEFAULT '',
            ADD COLUMN IF NOT EXISTS property_name VARCHAR(191) NOT NULL DEFAULT '',
            ADD COLUMN IF NOT EXISTS is_active TINYINT(1) NOT NULL DEFAULT 1;" --quiet --allow-root
          
          wp db query "CREATE INDEX room_active_idx ON wp_monthly_rooms (is_active);" --allow-root || true

          # --- Schema reconcile: bookings (idempotent) ---
          wp db query "CREATE TABLE IF NOT EXISTS wp_monthly_bookings (
            id BIGINT UNSIGNED AUTO_INCREMENT PRIMARY KEY
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;" --quiet --allow-root
          
          wp db query "ALTER TABLE wp_monthly_bookings
            ADD COLUMN IF NOT EXISTS room_id BIGINT UNSIGNED NOT NULL,
            ADD COLUMN IF NOT EXISTS start_date DATE NOT NULL,
            ADD COLUMN IF NOT EXISTS end_date DATE NOT NULL,
            ADD COLUMN IF NOT EXISTS status VARCHAR(50) NOT NULL DEFAULT 'booked';" --quiet --allow-root
          
          wp db query "CREATE INDEX b_room_idx ON wp_monthly_bookings (room_id);" --allow-root || true
          wp db query "CREATE INDEX b_start_idx ON wp_monthly_bookings (start_date);" --allow-root || true
          wp db query "CREATE INDEX b_end_idx ON wp_monthly_bookings (end_date);" --allow-root || true

      - name: Seed minimal data with robust room ID handling
        run: |
          cd /tmp/wordpress
          
          # --- Seeding (get room ID and use it consistently) ---
          # Insert room if it doesn't exist
          wp db query "
          INSERT INTO wp_monthly_rooms (display_name, room_name, property_name, is_active)
          VALUES ('デモ101', 'Room 101', 'Demo Building', 1)
          ON DUPLICATE KEY UPDATE is_active=VALUES(is_active);" --allow-root || true

          # Get room_id (fallback to 1 if none found)
          ROOM_ID=$(wp db query "SELECT room_id FROM wp_monthly_rooms ORDER BY room_id ASC LIMIT 1;" --skip-column-names --allow-root | tr -d '\r' | head -n1)
          [ -z "$ROOM_ID" ] && ROOM_ID=1
          echo "Using ROOM_ID: $ROOM_ID"

          # Insert campaign data using the retrieved room_id
          wp db query "
          INSERT INTO wp_monthly_campaigns (room_id, title, type, start_date, end_date, is_active)
          VALUES (${ROOM_ID}, 'E2Eデモキャンペーン', 'discount', CURDATE(), DATE_ADD(CURDATE(), INTERVAL 7 DAY), 1);" --allow-root || true

          # Insert booking data for cleaning buffer verification
          wp db query "
          INSERT INTO wp_monthly_bookings (room_id, start_date, end_date, status)
          VALUES (${ROOM_ID}, DATE_ADD(CURDATE(), INTERVAL 3 DAY), DATE_ADD(CURDATE(), INTERVAL 10 DAY), 'booked');" --allow-root || true

      - name: Create monthly-calendar page
        run: |
          cd /tmp/wordpress
          wp post create --post_type=page \
            --post_title='予約カレンダー' \
            --post_name='monthly-calendar' \
            --post_status=publish \
            --post_content='[monthly_booking_calendar]' \
            --allow-root
          wp rewrite structure '/%postname%/' --allow-root
          wp rewrite flush --hard --allow-root

      - name: Health check and diagnostics
        run: |
          echo "CAL_URL=http://localhost:8080"
          mkdir -p test-results
          
          # Check page for database errors
          curl -fsSL "http://localhost:8080/monthly-calendar/" -o test-results/monthly-calendar-before-test.html || true
          if grep -qi "wpdberror" test-results/monthly-calendar-before-test.html; then
            echo "❌ DB error detected on /monthly-calendar/"
            cat test-results/monthly-calendar-before-test.html | head -n 20
            exit 1
          fi
          echo "✅ Page accessibility verified"

      - name: Install dependencies for tests
        run: npm ci

      - name: Run Playwright smoke test
        run: |
          npx playwright install --with-deps
          CAL_URL=http://localhost:8080 npx playwright test tests/e2e/smoke.spec.js --project=chromium --reporter=list
        
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results/**
            playwright-report/**
          retention-days: 7
