name: E2E Tests (WordPress + Monthly Booking)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  e2e:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        ports: ["3306:3306"]
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: wordpress
          MYSQL_USER: wp
          MYSQL_PASSWORD: wp
        options: >-
          --health-cmd="mysqladmin ping -h localhost -u root -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install WordPress CLI
        run: |
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp

      - name: Setup PHP and WordPress with tar extraction
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y php php-mysql php-curl php-xml php-mbstring
          
          # Use clean extraction path with tar --strip-components=1
          WP_DIR="$RUNNER_TEMP/wp"
          rm -rf "$WP_DIR"
          mkdir -p "$WP_DIR"
          
          echo "Downloading WordPress..."
          curl -fsSL https://wordpress.org/latest.tar.gz -o "$RUNNER_TEMP/wp.tgz"
          
          echo "Extracting to $WP_DIR ..."
          tar -xzf "$RUNNER_TEMP/wp.tgz" -C "$WP_DIR" --strip-components=1
          ls -la "$WP_DIR"
          
          cd "$WP_DIR"
          wp config create \
            --dbname=wordpress \
            --dbuser=wp \
            --dbpass=wp \
            --dbhost=127.0.0.1:3306 \
            --allow-root
          wp core install \
            --url="http://localhost:8080" \
            --title="Test Site" \
            --admin_user=admin \
            --admin_password=admin \
            --admin_email=test@example.com \
            --skip-email \
            --allow-root
          php -S 0.0.0.0:8080 -t "$WP_DIR" > /dev/null 2>&1 &

      - name: Wait for WordPress
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8080 | grep "Test Site" > /dev/null; then
              echo "WordPress is up"
              break
            fi
            echo "Waiting for WordPress..."
            sleep 5
          done

      - name: Copy plugin to WordPress
        run: |
          WP_DIR="$RUNNER_TEMP/wp"
          cp -r . "$WP_DIR/wp-content/plugins/monthly-booking/"
          cd "$WP_DIR"
          wp plugin activate monthly-booking --allow-root

      - name: Create plugin DB tables with correct schemas
        run: |
          set -euo pipefail
          WP_DIR="$RUNNER_TEMP/wp"
          cd "$WP_DIR"
          
          # Create wp_monthly_rooms with correct schema matching plugin
          wp db query "CREATE TABLE IF NOT EXISTS wp_monthly_rooms (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            room_id int(11) UNIQUE,
            property_id int(11),
            mor_g char(1) DEFAULT 'M',
            property_name text,
            display_name text,
            room_name varchar(100) NOT NULL,
            daily_rent int(11),
            is_active tinyint(1) DEFAULT 1,
            created_at datetime DEFAULT CURRENT_TIMESTAMP,
            updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY room_id (room_id),
            KEY is_active (is_active)
          ) DEFAULT CHARSET=utf8mb4;" --allow-root

          # Create wp_monthly_campaigns with correct schema (no room_id column)
          wp db query "CREATE TABLE IF NOT EXISTS wp_monthly_campaigns (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            campaign_name varchar(100) NOT NULL,
            campaign_description text,
            type varchar(20) DEFAULT NULL,
            discount_type varchar(20) NOT NULL,
            discount_value decimal(10,2) NOT NULL,
            min_stay_days int(3) DEFAULT 1,
            start_date date NOT NULL,
            end_date date NOT NULL,
            is_active tinyint(1) DEFAULT 1,
            created_at datetime DEFAULT CURRENT_TIMESTAMP,
            updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY start_date (start_date),
            KEY end_date (end_date),
            KEY is_active (is_active)
          ) DEFAULT CHARSET=utf8mb4;" --allow-root

          # Create wp_monthly_bookings with correct schema
          wp db query "CREATE TABLE IF NOT EXISTS wp_monthly_bookings (
            id mediumint(9) NOT NULL AUTO_INCREMENT,
            room_id int(11) NOT NULL,
            start_date date NOT NULL,
            end_date date NOT NULL,
            status varchar(50) DEFAULT 'confirmed',
            created_at datetime DEFAULT CURRENT_TIMESTAMP,
            updated_at datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
            PRIMARY KEY (id),
            KEY room_id (room_id),
            KEY start_date (start_date),
            KEY end_date (end_date)
          ) DEFAULT CHARSET=utf8mb4;" --allow-root

      - name: Seed minimal data with correct column names
        run: |
          set -euo pipefail
          WP_DIR="$RUNNER_TEMP/wp"
          cd "$WP_DIR"
          
          # Clear existing data for deterministic tests
          wp db query "TRUNCATE TABLE wp_monthly_bookings;" --allow-root
          wp db query "TRUNCATE TABLE wp_monthly_campaigns;" --allow-root
          wp db query "TRUNCATE TABLE wp_monthly_rooms;" --allow-root
          
          # Insert room data with correct columns (room_id, not id as primary)
          wp db query "INSERT INTO wp_monthly_rooms (room_id, display_name, room_name, property_name, daily_rent, is_active) 
          VALUES (101, 'デモ101', 'Room 101', 'Demo Building', 2400, 1);" --allow-root
          
          # Insert campaign data with correct columns (campaign_name, not room_id)
          wp db query "INSERT INTO wp_monthly_campaigns (campaign_name, campaign_description, type, discount_type, discount_value, min_stay_days, start_date, end_date, is_active)
          VALUES ('E2Eデモキャンペーン', 'E2E testing campaign', 'immediate', 'percentage', 10.00, 7, CURDATE(), DATE_ADD(CURDATE(), INTERVAL 7 DAY), 1);" --allow-root
          
          # Insert booking data for cleaning buffer verification
          wp db query "INSERT INTO wp_monthly_bookings (room_id, start_date, end_date, status)
          VALUES (101, DATE_ADD(CURDATE(), INTERVAL 10 DAY), DATE_ADD(CURDATE(), INTERVAL 15 DAY), 'confirmed');" --allow-root

      - name: Create monthly-calendar page
        run: |
          WP_DIR="$RUNNER_TEMP/wp"
          cd "$WP_DIR"
          wp post create --post_type=page \
            --post_title='予約カレンダー' \
            --post_name='monthly-calendar' \
            --post_status=publish \
            --post_content='[monthly_booking_calendar]' \
            --allow-root
          wp rewrite structure '/%postname%/' --allow-root
          wp rewrite flush --hard --allow-root

      - name: Health check /monthly-calendar before Playwright
        run: |
          set -euo pipefail
          CAL_URL="http://localhost:8080"
          echo "CAL_URL=$CAL_URL"
          mkdir -p test-results
          
          for i in $(seq 1 20); do
            code=$(curl -s -o test-results/monthly-calendar-before-test.html -w '%{http_code}' "$CAL_URL/monthly-calendar/")
            if [ "$code" = "200" ] && ! grep -q "wpdberror" test-results/monthly-calendar-before-test.html; then
              echo "OK: /monthly-calendar/ 200 & no DB error"
              break
            fi
            echo "wait($i): code=$code"
            sleep 2
          done
          
          if [ "$code" != "200" ] || grep -q "wpdberror" test-results/monthly-calendar-before-test.html; then
            echo "NG: calendar page not ready or DB error present"
            sed -n '1,120p' test-results/monthly-calendar-before-test.html || true
            exit 1
          fi

      - name: Install dependencies for tests
        run: npm ci

      - name: Run Playwright smoke test
        run: |
          npx playwright install --with-deps
          CAL_URL=http://localhost:8080 npx playwright test tests/e2e/smoke.spec.js --project=chromium --reporter=list
        
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results/**
            playwright-report/**
          retention-days: 7
