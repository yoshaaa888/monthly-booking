name: E2E Tests (WordPress + Monthly Booking)

on:
  push:
    branches: [ devin/1754064671-monthly-booking-plugin ]
  pull_request:
    branches: [ devin/1754064671-monthly-booking-plugin ]

# ご提案に基づき、PRとの競合を避ける安全なキーに変更
concurrency:
  group: e2e-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref_name }}
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      NODE_VERSION: '20'
      CAL_URL: http://localhost:8888

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node and Install Dependencies
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      - run: npm ci
      - run: npx playwright install --with-deps
      - run: npm i -g @wordpress/env

      # ───────── WordPress (wp-env) 起動 & 準備 ─────────
      - name: Start WordPress
        run: wp-env start

      - name: Wait for WordPress to be ready
        run: |
          echo "Waiting for WordPress..."
          set -euo pipefail
          ok=0
          for i in $(seq 1 60); do
            code=$(curl -s -o /dev/null -w '%{http_code}' "$CAL_URL" || true)
            if [ "$code" = "200" ]; then
              ok=1
              break
            fi
            echo "Waiting WP... (attempt $i/60, http_code=$code)"; sleep 2
          done
          if [ $ok -ne 1 ]; then
            echo "WP did not become healthy in time."
            exit 1
          fi
          echo "WordPress is up and running!"

      # ───────── プラグイン有効化 & 環境設定 ─────────
      - name: Activate Plugin and Configure WP
        run: |
          set -euo pipefail
          wp-env run cli wp --info
          wp-env run cli wp plugin activate monthly-booking
          wp-env run cli wp rewrite structure '/%postname%/'
          wp-env run cli wp rewrite flush --hard

      - name: Create Calendar Page if not exists
        run: |
          set -euo pipefail
          # ご提案に基づき、空白除去で判定を厳密化
          PAGE_EXISTS=$(wp-env run cli wp post list --post_type=page --name=monthly-calendar --field=ID --format=ids | tr -d '\r\n' || true)
          if [ -z "$PAGE_EXISTS" ]; then
            echo "Creating calendar page..."
            wp-env run cli wp post create --post_type=page --post_title='予約カレンダー' --post_name='monthly-calendar' --post_status=publish --post_content='[monthly_booking_calendar]'
          else
            echo "Calendar page already exists."
          fi

      # ───────── （任意）テスト用データ投入 ─────────
      - name: Seed minimal data (non-fatal)
        run: wp-env run cli wp db query "INSERT IGNORE INTO wp_monthly_rooms (display_name, room_name, property_name, is_active) VALUES ('E2Eデモ101', 'Room 101', 'Demo Building', 1);" || true

      # ───────── Playwright 実行前チェック ─────────
      - name: Health check /monthly-calendar
        # ご提案に基づき、テスト実行前にページの正常性を確認
        run: |
          set -euo pipefail
          echo "Checking health of /monthly-calendar/ page..."
          code=$(curl -s -o /tmp/page.html -w '%{http_code}' "$CAL_URL/monthly-calendar/")
          if [ "$code" != "200" ]; then
            echo "Error: /monthly-calendar/ page is not responding with 200 (got $code)."
            echo "--- Page Content (first 120 lines) ---"
            sed -n '1,120p' /tmp/page.html || true
            exit 1
          fi
          if grep -qi "wpdberror" /tmp/page.html; then
            echo "Error: Database error detected on /monthly-calendar/ page."
            echo "--- Page Content (first 120 lines) ---"
            sed -n '1,120p' /tmp/page.html || true
            exit 1
          fi
          echo "Calendar page is healthy."

      # ───────── Playwright 実行 ─────────
      - name: Run Playwright Tests
        # ご提案に基づき、HTMLレポーターを明示
        run: npx playwright test --reporter=list,html
        env:
          CAL_URL: ${{ env.CAL_URL }}

      # ───────── レポートとログの保存 ─────────
      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          if-no-files-found: warn
      
      - name: Dump wp-env logs on failure
        # ご提案に基づき、失敗時のデバッグ情報を追加
        if: failure()
        run: |
          echo "::group::Dumping wp-env logs..."
          docker ps -a || true
          wp-env logs || true
          echo "::endgroup::"
